#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
File: slack-exporter
Author: Lee Archer
Email: lee+github@archer.onl
Github: https://github.com/lbn/slack-exporter
Description: Export data from Slack as a non-admin user
"""

import os
import sys
import json
import time
import argparse
from datetime import datetime, date

from slacker import Slacker


class SlackExporter:
    def __init__(self, token, data_dir):
        self.slack = Slacker(token)
        self.data_dir = data_dir
        if not os.path.exists(data_dir):
            os.mkdir(data_dir)

        self.logs_dir = os.path.join(data_dir, "logs")

        if not os.path.exists(self.logs_dir):
            os.mkdir(self.logs_dir)

    def users(self):
        users = self.slack.users.list().body["members"]

        with open(os.path.join(self.data_dir, "users.json"), "w") as f:
            json.dump(users, f)

    def channels(self, date_from, date_to=None, min_members=None,
                 no_archived=True):
        def matches(chan):
            match = True
            if min_members is not None:
                match &= chan["num_members"] >= min_members
            if no_archived:
                match &= not chan["is_archived"]
            return match

        channels = [chan for chan in
                    self.slack.channels.list().body["channels"]
                    if matches(chan)]

        # Export channel data without history
        with open(os.path.join(self.data_dir, "channels.json"), "w") as f:
            json.dump(channels, f)

        print("Processing", len(channels), "channels")

        for channel in channels:
            self.channel_history(channel)
            time.sleep(1)

    def channel_history(self, channel):
        messages = []
        oldest = time.mktime(datetime(2016, 4, 20).timetuple())

        # Upper limit for date
        # Assuming we are getting data for 2016-04-20 to 2016-05-20
        # it will work like this:
        # get(2016-04-20, 2016-05-20)
        # -> we actually receive data for (2016-05-19, 2016-05-20), so next:
        # get(2016-04-20, 2016-05-19)
        # -> we actually receive data for (2016-05-18, 2016-05-19), so next:
        # We keep doing this until we either reach the end of messages or
        # receive some messages from before the oldest date
        ts = int(time.time())
        while ts > oldest:
            msgs = self.slack.channels.history(
                channel=channel["id"], latest=ts, oldest=oldest,
                count=1000).body["messages"]
            if len(msgs) == 0:
                break
            messages += msgs
            ts = int(float(msgs[-1]["ts"]))

        chan_log = os.path.join(self.logs_dir, channel["name"]+".json")
        with open(chan_log, "w") as f:
            json.dump(messages, f)


def valid_date(s):
    try:
        return datetime.strptime(s, "%Y-%m-%d")
    except ValueError:
        msg = "Not a valid date: '{0}'.".format(s)
        raise argparse.ArgumentTypeError(msg)


def main():
    token = os.getenv("SLACK_TOKEN")
    if token is None:
        print("Please set the SLACK_TOKEN environment variable to " +
              "your Slack token", file=sys.stderr)
        sys.exit(1)

    parser = argparse.ArgumentParser(
        description="Export data from Slack as a non-admin user",
        formatter_class=argparse.ArgumentDefaultsHelpFormatter
    )
    parser.add_argument(
        "--data",
        type=str,
        metavar="DATA_DIR",
        default="data",
        help="Data directory where channel, " +
        "user and message data will be saved")

    parser.add_argument("--archived", type=bool, default=False,
                        help="Also download history for archived channels")

    parser.add_argument("--users", type=bool, default=True,
                        help="Save user data to DATA_DIR/users.json")

    parser.add_argument("--messages", type=bool, default=True,
                        help="Save user data to DATA_DIR/channels")

    parser.add_argument("--min-members", type=int, default=0,
                        help="Only export channels which have at least " +
                        "this number of members")

    parser.add_argument("--date-start",
                        help="History start date - format YYYY-MM-DD ",
                        required=True, type=valid_date)

    parser.add_argument("--date-end",
                        help="History end date - format YYYY-MM-DD ",
                        required=False,
                        default=date.today().isoformat(),
                        type=valid_date)

    args = parser.parse_args()
    print(args.date_start)

    exporter = SlackExporter(token, args.data)

    if args.users:
        exporter.users()

    if args.messages:
        exporter.channels("start", "end", args.min_members, not args.archived)

if __name__ == "__main__":
    main()
